package ii887522.oxy.collection

import org.junit.Assert.*
import org.junit.Test

class ArrayListTest {
  @Test fun `test initial capacity equal to 3`() {
    assertThrows(IllegalArgumentException::class.java) {
      ArrayList<Any?>(3)
    }
  }

  @Test fun `test set with default initial capacity`() {
    val numbers = ArrayList<Int>()
    numbers.append(0)
    numbers.append(1)
    numbers.append(2)
    numbers.append(3)
    numbers.append(4)
    numbers.append(5)
    numbers.append(6)
    numbers.append(7)
    numbers.append(8)
    numbers.append(9)
    numbers.append(10)
    numbers.append(11)
    numbers.append(12)
    numbers.append(13)
    numbers.append(14)
    numbers.append(15)
    numbers.append(16)
    numbers.append(17)
    numbers.append(18)
    numbers.append(19)
    numbers.append(20)
    numbers.append(21)
    numbers.append(22)
    numbers.append(23)
    numbers.append(24)
    numbers.append(25)
    numbers.append(26)
    numbers.append(27)
    numbers.append(28)
    numbers.append(29)
    numbers.append(30)
    numbers.append(31)
    numbers.append(32)
    numbers.append(33)
    numbers.append(34)
    numbers.append(35)
    numbers.append(36)
    numbers.append(37)
    numbers.append(38)
    numbers.append(39)
    numbers.append(40)
    numbers.append(41)
    numbers.append(42)
    numbers.append(43)
    numbers.append(44)
    assertThrows(IllegalArgumentException::class.java) { numbers[-1] = 3 }
    assertThrows(IllegalArgumentException::class.java) { numbers[45] = 3 }
    numbers[0] = 45
    numbers[1] = 46
    numbers[2] = 47
    numbers[3] = 48
    numbers[4] = 49
    numbers[5] = 50
    numbers[6] = 51
    numbers[7] = 52
    numbers[8] = 53
    numbers[9] = 54
    numbers[10] = 55
    numbers[11] = 56
    numbers[12] = 57
    numbers[13] = 58
    numbers[14] = 59
    numbers[15] = 60
    numbers[16] = 61
    numbers[17] = 62
    numbers[18] = 63
    numbers[19] = 64
    numbers[20] = 65
    numbers[21] = 66
    numbers[22] = 67
    numbers[23] = 68
    numbers[24] = 69
    numbers[25] = 70
    numbers[26] = 71
    numbers[27] = 72
    numbers[28] = 73
    numbers[29] = 74
    numbers[30] = 75
    numbers[31] = 76
    numbers[32] = 77
    numbers[33] = 78
    numbers[34] = 79
    numbers[35] = 80
    numbers[36] = 81
    numbers[37] = 82
    numbers[38] = 83
    numbers[39] = 84
    numbers[40] = 85
    numbers[41] = 86
    numbers[42] = 87
    numbers[43] = 88
    numbers[44] = 89
    assertEquals(45, numbers[0])
    assertEquals(46, numbers[1])
    assertEquals(47, numbers[2])
    assertEquals(48, numbers[3])
    assertEquals(49, numbers[4])
    assertEquals(50, numbers[5])
    assertEquals(51, numbers[6])
    assertEquals(52, numbers[7])
    assertEquals(53, numbers[8])
    assertEquals(54, numbers[9])
    assertEquals(55, numbers[10])
    assertEquals(56, numbers[11])
    assertEquals(57, numbers[12])
    assertEquals(58, numbers[13])
    assertEquals(59, numbers[14])
    assertEquals(60, numbers[15])
    assertEquals(61, numbers[16])
    assertEquals(62, numbers[17])
    assertEquals(63, numbers[18])
    assertEquals(64, numbers[19])
    assertEquals(65, numbers[20])
    assertEquals(66, numbers[21])
    assertEquals(67, numbers[22])
    assertEquals(68, numbers[23])
    assertEquals(69, numbers[24])
    assertEquals(70, numbers[25])
    assertEquals(71, numbers[26])
    assertEquals(72, numbers[27])
    assertEquals(73, numbers[28])
    assertEquals(74, numbers[29])
    assertEquals(75, numbers[30])
    assertEquals(76, numbers[31])
    assertEquals(77, numbers[32])
    assertEquals(78, numbers[33])
    assertEquals(79, numbers[34])
    assertEquals(80, numbers[35])
    assertEquals(81, numbers[36])
    assertEquals(82, numbers[37])
    assertEquals(83, numbers[38])
    assertEquals(84, numbers[39])
    assertEquals(85, numbers[40])
    assertEquals(86, numbers[41])
    assertEquals(87, numbers[42])
    assertEquals(88, numbers[43])
    assertEquals(89, numbers[44])
    assertThrows(IllegalArgumentException::class.java) { numbers[-1] }
    assertThrows(IllegalArgumentException::class.java) { numbers[45] }
    assertEquals(45, numbers.size)
  }

  @Test fun `test set with initial capacity equal to 16`() {
    val numbers = ArrayList<Int>(16)
    numbers.append(0)
    numbers.append(1)
    numbers.append(2)
    numbers.append(3)
    numbers.append(4)
    numbers.append(5)
    numbers.append(6)
    numbers.append(7)
    numbers.append(8)
    numbers.append(9)
    numbers.append(10)
    numbers.append(11)
    numbers.append(12)
    numbers.append(13)
    numbers.append(14)
    numbers.append(15)
    numbers.append(16)
    numbers.append(17)
    numbers.append(18)
    numbers.append(19)
    numbers.append(20)
    numbers.append(21)
    numbers.append(22)
    numbers.append(23)
    numbers.append(24)
    numbers.append(25)
    numbers.append(26)
    numbers.append(27)
    numbers.append(28)
    numbers.append(29)
    numbers.append(30)
    numbers.append(31)
    numbers.append(32)
    numbers.append(33)
    numbers.append(34)
    numbers.append(35)
    numbers.append(36)
    numbers.append(37)
    numbers.append(38)
    numbers.append(39)
    numbers.append(40)
    numbers.append(41)
    numbers.append(42)
    numbers.append(43)
    numbers.append(44)
    assertThrows(IllegalArgumentException::class.java) { numbers[-1] = 3 }
    assertThrows(IllegalArgumentException::class.java) { numbers[45] = 3 }
    numbers[0] = 45
    numbers[1] = 46
    numbers[2] = 47
    numbers[3] = 48
    numbers[4] = 49
    numbers[5] = 50
    numbers[6] = 51
    numbers[7] = 52
    numbers[8] = 53
    numbers[9] = 54
    numbers[10] = 55
    numbers[11] = 56
    numbers[12] = 57
    numbers[13] = 58
    numbers[14] = 59
    numbers[15] = 60
    numbers[16] = 61
    numbers[17] = 62
    numbers[18] = 63
    numbers[19] = 64
    numbers[20] = 65
    numbers[21] = 66
    numbers[22] = 67
    numbers[23] = 68
    numbers[24] = 69
    numbers[25] = 70
    numbers[26] = 71
    numbers[27] = 72
    numbers[28] = 73
    numbers[29] = 74
    numbers[30] = 75
    numbers[31] = 76
    numbers[32] = 77
    numbers[33] = 78
    numbers[34] = 79
    numbers[35] = 80
    numbers[36] = 81
    numbers[37] = 82
    numbers[38] = 83
    numbers[39] = 84
    numbers[40] = 85
    numbers[41] = 86
    numbers[42] = 87
    numbers[43] = 88
    numbers[44] = 89
    assertEquals(45, numbers[0])
    assertEquals(46, numbers[1])
    assertEquals(47, numbers[2])
    assertEquals(48, numbers[3])
    assertEquals(49, numbers[4])
    assertEquals(50, numbers[5])
    assertEquals(51, numbers[6])
    assertEquals(52, numbers[7])
    assertEquals(53, numbers[8])
    assertEquals(54, numbers[9])
    assertEquals(55, numbers[10])
    assertEquals(56, numbers[11])
    assertEquals(57, numbers[12])
    assertEquals(58, numbers[13])
    assertEquals(59, numbers[14])
    assertEquals(60, numbers[15])
    assertEquals(61, numbers[16])
    assertEquals(62, numbers[17])
    assertEquals(63, numbers[18])
    assertEquals(64, numbers[19])
    assertEquals(65, numbers[20])
    assertEquals(66, numbers[21])
    assertEquals(67, numbers[22])
    assertEquals(68, numbers[23])
    assertEquals(69, numbers[24])
    assertEquals(70, numbers[25])
    assertEquals(71, numbers[26])
    assertEquals(72, numbers[27])
    assertEquals(73, numbers[28])
    assertEquals(74, numbers[29])
    assertEquals(75, numbers[30])
    assertEquals(76, numbers[31])
    assertEquals(77, numbers[32])
    assertEquals(78, numbers[33])
    assertEquals(79, numbers[34])
    assertEquals(80, numbers[35])
    assertEquals(81, numbers[36])
    assertEquals(82, numbers[37])
    assertEquals(83, numbers[38])
    assertEquals(84, numbers[39])
    assertEquals(85, numbers[40])
    assertEquals(86, numbers[41])
    assertEquals(87, numbers[42])
    assertEquals(88, numbers[43])
    assertEquals(89, numbers[44])
    assertThrows(IllegalArgumentException::class.java) { numbers[-1] }
    assertThrows(IllegalArgumentException::class.java) { numbers[45] }
    assertEquals(45, numbers.size)
  }

  @Test fun `test append bulk with default initial capacity`() {
    val numbers = ArrayList<Int>()
    numbers.appendBulk(
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      16,
      17,
      18,
      19,
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      27,
      28,
      29,
      30,
      31,
      32,
      33,
      34,
      35,
      36,
      37,
      38,
      39,
      40,
      41,
      42,
      43,
      44
    )
    assertEquals(0, numbers[0])
    assertEquals(1, numbers[1])
    assertEquals(2, numbers[2])
    assertEquals(3, numbers[3])
    assertEquals(4, numbers[4])
    assertEquals(5, numbers[5])
    assertEquals(6, numbers[6])
    assertEquals(7, numbers[7])
    assertEquals(8, numbers[8])
    assertEquals(9, numbers[9])
    assertEquals(10, numbers[10])
    assertEquals(11, numbers[11])
    assertEquals(12, numbers[12])
    assertEquals(13, numbers[13])
    assertEquals(14, numbers[14])
    assertEquals(15, numbers[15])
    assertEquals(16, numbers[16])
    assertEquals(17, numbers[17])
    assertEquals(18, numbers[18])
    assertEquals(19, numbers[19])
    assertEquals(20, numbers[20])
    assertEquals(21, numbers[21])
    assertEquals(22, numbers[22])
    assertEquals(23, numbers[23])
    assertEquals(24, numbers[24])
    assertEquals(25, numbers[25])
    assertEquals(26, numbers[26])
    assertEquals(27, numbers[27])
    assertEquals(28, numbers[28])
    assertEquals(29, numbers[29])
    assertEquals(30, numbers[30])
    assertEquals(31, numbers[31])
    assertEquals(32, numbers[32])
    assertEquals(33, numbers[33])
    assertEquals(34, numbers[34])
    assertEquals(35, numbers[35])
    assertEquals(36, numbers[36])
    assertEquals(37, numbers[37])
    assertEquals(38, numbers[38])
    assertEquals(39, numbers[39])
    assertEquals(40, numbers[40])
    assertEquals(41, numbers[41])
    assertEquals(42, numbers[42])
    assertEquals(43, numbers[43])
    assertEquals(44, numbers[44])
  }

  @Test fun `test append bulk with initial capacity equal to 16`() {
    val numbers = ArrayList<Int>(16)
    numbers.appendBulk(
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      16,
      17,
      18,
      19,
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      27,
      28,
      29,
      30,
      31,
      32,
      33,
      34,
      35,
      36,
      37,
      38,
      39,
      40,
      41,
      42,
      43,
      44
    )
    assertEquals(0, numbers[0])
    assertEquals(1, numbers[1])
    assertEquals(2, numbers[2])
    assertEquals(3, numbers[3])
    assertEquals(4, numbers[4])
    assertEquals(5, numbers[5])
    assertEquals(6, numbers[6])
    assertEquals(7, numbers[7])
    assertEquals(8, numbers[8])
    assertEquals(9, numbers[9])
    assertEquals(10, numbers[10])
    assertEquals(11, numbers[11])
    assertEquals(12, numbers[12])
    assertEquals(13, numbers[13])
    assertEquals(14, numbers[14])
    assertEquals(15, numbers[15])
    assertEquals(16, numbers[16])
    assertEquals(17, numbers[17])
    assertEquals(18, numbers[18])
    assertEquals(19, numbers[19])
    assertEquals(20, numbers[20])
    assertEquals(21, numbers[21])
    assertEquals(22, numbers[22])
    assertEquals(23, numbers[23])
    assertEquals(24, numbers[24])
    assertEquals(25, numbers[25])
    assertEquals(26, numbers[26])
    assertEquals(27, numbers[27])
    assertEquals(28, numbers[28])
    assertEquals(29, numbers[29])
    assertEquals(30, numbers[30])
    assertEquals(31, numbers[31])
    assertEquals(32, numbers[32])
    assertEquals(33, numbers[33])
    assertEquals(34, numbers[34])
    assertEquals(35, numbers[35])
    assertEquals(36, numbers[36])
    assertEquals(37, numbers[37])
    assertEquals(38, numbers[38])
    assertEquals(39, numbers[39])
    assertEquals(40, numbers[40])
    assertEquals(41, numbers[41])
    assertEquals(42, numbers[42])
    assertEquals(43, numbers[43])
    assertEquals(44, numbers[44])
  }

  @Test fun `test append with default initial capacity`() {
    val numbers = ArrayList<Int>()
    numbers.append(0)
    assertEquals(0, numbers[0])
    assertEquals(1, numbers.size)
    numbers.append(1)
    assertEquals(0, numbers[0])
    assertEquals(1, numbers[1])
    assertEquals(2, numbers.size)
    numbers.append(2)
    assertEquals(0, numbers[0])
    assertEquals(1, numbers[1])
    assertEquals(2, numbers[2])
    assertEquals(3, numbers.size)
    numbers.append(3)
    numbers.append(4)
    numbers.append(5)
    numbers.append(6)
    numbers.append(7)
    numbers.append(8)
    numbers.append(9)
    numbers.append(10)
    numbers.append(11)
    numbers.append(12)
    numbers.append(13)
    numbers.append(14)
    numbers.append(15)
    numbers.append(16)
    numbers.append(17)
    numbers.append(18)
    numbers.append(19)
    numbers.append(20)
    numbers.append(21)
    numbers.append(22)
    numbers.append(23)
    numbers.append(24)
    numbers.append(25)
    numbers.append(26)
    numbers.append(27)
    numbers.append(28)
    numbers.append(29)
    numbers.append(30)
    numbers.append(31)
    numbers.append(32)
    numbers.append(33)
    numbers.append(34)
    numbers.append(35)
    numbers.append(36)
    numbers.append(37)
    numbers.append(38)
    numbers.append(39)
    numbers.append(40)
    numbers.append(41)
    numbers.append(42)
    numbers.append(43)
    numbers.append(44)
    assertEquals(0, numbers[0])
    assertEquals(1, numbers[1])
    assertEquals(2, numbers[2])
    assertEquals(3, numbers[3])
    assertEquals(4, numbers[4])
    assertEquals(5, numbers[5])
    assertEquals(6, numbers[6])
    assertEquals(7, numbers[7])
    assertEquals(8, numbers[8])
    assertEquals(9, numbers[9])
    assertEquals(10, numbers[10])
    assertEquals(11, numbers[11])
    assertEquals(12, numbers[12])
    assertEquals(13, numbers[13])
    assertEquals(14, numbers[14])
    assertEquals(15, numbers[15])
    assertEquals(16, numbers[16])
    assertEquals(17, numbers[17])
    assertEquals(18, numbers[18])
    assertEquals(19, numbers[19])
    assertEquals(20, numbers[20])
    assertEquals(21, numbers[21])
    assertEquals(22, numbers[22])
    assertEquals(23, numbers[23])
    assertEquals(24, numbers[24])
    assertEquals(25, numbers[25])
    assertEquals(26, numbers[26])
    assertEquals(27, numbers[27])
    assertEquals(28, numbers[28])
    assertEquals(29, numbers[29])
    assertEquals(30, numbers[30])
    assertEquals(31, numbers[31])
    assertEquals(32, numbers[32])
    assertEquals(33, numbers[33])
    assertEquals(34, numbers[34])
    assertEquals(35, numbers[35])
    assertEquals(36, numbers[36])
    assertEquals(37, numbers[37])
    assertEquals(38, numbers[38])
    assertEquals(39, numbers[39])
    assertEquals(40, numbers[40])
    assertEquals(41, numbers[41])
    assertEquals(42, numbers[42])
    assertEquals(43, numbers[43])
    assertEquals(44, numbers[44])
    assertThrows(IllegalArgumentException::class.java) { numbers[-1] }
    assertThrows(IllegalArgumentException::class.java) { numbers[45] }
    assertEquals(45, numbers.size)
    numbers.clear()
    numbers.append(45)
    assertEquals(45, numbers[0])
    assertEquals(1, numbers.size)
    numbers.append(46)
    assertEquals(45, numbers[0])
    assertEquals(46, numbers[1])
    assertEquals(2, numbers.size)
    numbers.append(47)
    assertEquals(45, numbers[0])
    assertEquals(46, numbers[1])
    assertEquals(47, numbers[2])
    assertEquals(3, numbers.size)
    numbers.append(48)
    numbers.append(49)
    numbers.append(50)
    numbers.append(51)
    numbers.append(52)
    numbers.append(53)
    numbers.append(54)
    numbers.append(55)
    numbers.append(56)
    numbers.append(57)
    numbers.append(58)
    numbers.append(59)
    numbers.append(60)
    numbers.append(61)
    numbers.append(62)
    numbers.append(63)
    numbers.append(64)
    numbers.append(65)
    numbers.append(66)
    numbers.append(67)
    numbers.append(68)
    numbers.append(69)
    numbers.append(70)
    numbers.append(71)
    numbers.append(72)
    numbers.append(73)
    numbers.append(74)
    numbers.append(75)
    numbers.append(76)
    numbers.append(77)
    numbers.append(78)
    numbers.append(79)
    numbers.append(80)
    numbers.append(81)
    numbers.append(82)
    numbers.append(83)
    numbers.append(84)
    numbers.append(85)
    numbers.append(86)
    numbers.append(87)
    numbers.append(88)
    numbers.append(89)
    assertEquals(45, numbers[0])
    assertEquals(46, numbers[1])
    assertEquals(47, numbers[2])
    assertEquals(48, numbers[3])
    assertEquals(49, numbers[4])
    assertEquals(50, numbers[5])
    assertEquals(51, numbers[6])
    assertEquals(52, numbers[7])
    assertEquals(53, numbers[8])
    assertEquals(54, numbers[9])
    assertEquals(55, numbers[10])
    assertEquals(56, numbers[11])
    assertEquals(57, numbers[12])
    assertEquals(58, numbers[13])
    assertEquals(59, numbers[14])
    assertEquals(60, numbers[15])
    assertEquals(61, numbers[16])
    assertEquals(62, numbers[17])
    assertEquals(63, numbers[18])
    assertEquals(64, numbers[19])
    assertEquals(65, numbers[20])
    assertEquals(66, numbers[21])
    assertEquals(67, numbers[22])
    assertEquals(68, numbers[23])
    assertEquals(69, numbers[24])
    assertEquals(70, numbers[25])
    assertEquals(71, numbers[26])
    assertEquals(72, numbers[27])
    assertEquals(73, numbers[28])
    assertEquals(74, numbers[29])
    assertEquals(75, numbers[30])
    assertEquals(76, numbers[31])
    assertEquals(77, numbers[32])
    assertEquals(78, numbers[33])
    assertEquals(79, numbers[34])
    assertEquals(80, numbers[35])
    assertEquals(81, numbers[36])
    assertEquals(82, numbers[37])
    assertEquals(83, numbers[38])
    assertEquals(84, numbers[39])
    assertEquals(85, numbers[40])
    assertEquals(86, numbers[41])
    assertEquals(87, numbers[42])
    assertEquals(88, numbers[43])
    assertEquals(89, numbers[44])
    assertEquals(45, numbers.size)
  }

  @Test fun `test append with initial capacity equal to 16`() {
    val numbers = ArrayList<Int>(16)
    numbers.append(0)
    assertEquals(0, numbers[0])
    assertEquals(1, numbers.size)
    numbers.append(1)
    assertEquals(0, numbers[0])
    assertEquals(1, numbers[1])
    assertEquals(2, numbers.size)
    numbers.append(2)
    assertEquals(0, numbers[0])
    assertEquals(1, numbers[1])
    assertEquals(2, numbers[2])
    assertEquals(3, numbers.size)
    numbers.append(3)
    numbers.append(4)
    numbers.append(5)
    numbers.append(6)
    numbers.append(7)
    numbers.append(8)
    numbers.append(9)
    numbers.append(10)
    numbers.append(11)
    numbers.append(12)
    numbers.append(13)
    numbers.append(14)
    numbers.append(15)
    numbers.append(16)
    numbers.append(17)
    numbers.append(18)
    numbers.append(19)
    numbers.append(20)
    numbers.append(21)
    numbers.append(22)
    numbers.append(23)
    numbers.append(24)
    numbers.append(25)
    numbers.append(26)
    numbers.append(27)
    numbers.append(28)
    numbers.append(29)
    numbers.append(30)
    numbers.append(31)
    numbers.append(32)
    numbers.append(33)
    numbers.append(34)
    numbers.append(35)
    numbers.append(36)
    numbers.append(37)
    numbers.append(38)
    numbers.append(39)
    numbers.append(40)
    numbers.append(41)
    numbers.append(42)
    numbers.append(43)
    numbers.append(44)
    assertEquals(0, numbers[0])
    assertEquals(1, numbers[1])
    assertEquals(2, numbers[2])
    assertEquals(3, numbers[3])
    assertEquals(4, numbers[4])
    assertEquals(5, numbers[5])
    assertEquals(6, numbers[6])
    assertEquals(7, numbers[7])
    assertEquals(8, numbers[8])
    assertEquals(9, numbers[9])
    assertEquals(10, numbers[10])
    assertEquals(11, numbers[11])
    assertEquals(12, numbers[12])
    assertEquals(13, numbers[13])
    assertEquals(14, numbers[14])
    assertEquals(15, numbers[15])
    assertEquals(16, numbers[16])
    assertEquals(17, numbers[17])
    assertEquals(18, numbers[18])
    assertEquals(19, numbers[19])
    assertEquals(20, numbers[20])
    assertEquals(21, numbers[21])
    assertEquals(22, numbers[22])
    assertEquals(23, numbers[23])
    assertEquals(24, numbers[24])
    assertEquals(25, numbers[25])
    assertEquals(26, numbers[26])
    assertEquals(27, numbers[27])
    assertEquals(28, numbers[28])
    assertEquals(29, numbers[29])
    assertEquals(30, numbers[30])
    assertEquals(31, numbers[31])
    assertEquals(32, numbers[32])
    assertEquals(33, numbers[33])
    assertEquals(34, numbers[34])
    assertEquals(35, numbers[35])
    assertEquals(36, numbers[36])
    assertEquals(37, numbers[37])
    assertEquals(38, numbers[38])
    assertEquals(39, numbers[39])
    assertEquals(40, numbers[40])
    assertEquals(41, numbers[41])
    assertEquals(42, numbers[42])
    assertEquals(43, numbers[43])
    assertEquals(44, numbers[44])
    assertThrows(IllegalArgumentException::class.java) { numbers[-1] }
    assertThrows(IllegalArgumentException::class.java) { numbers[45] }
    assertEquals(45, numbers.size)
    numbers.clear()
    numbers.append(45)
    assertEquals(45, numbers[0])
    assertEquals(1, numbers.size)
    numbers.append(46)
    assertEquals(45, numbers[0])
    assertEquals(46, numbers[1])
    assertEquals(2, numbers.size)
    numbers.append(47)
    assertEquals(45, numbers[0])
    assertEquals(46, numbers[1])
    assertEquals(47, numbers[2])
    assertEquals(3, numbers.size)
    numbers.append(48)
    numbers.append(49)
    numbers.append(50)
    numbers.append(51)
    numbers.append(52)
    numbers.append(53)
    numbers.append(54)
    numbers.append(55)
    numbers.append(56)
    numbers.append(57)
    numbers.append(58)
    numbers.append(59)
    numbers.append(60)
    numbers.append(61)
    numbers.append(62)
    numbers.append(63)
    numbers.append(64)
    numbers.append(65)
    numbers.append(66)
    numbers.append(67)
    numbers.append(68)
    numbers.append(69)
    numbers.append(70)
    numbers.append(71)
    numbers.append(72)
    numbers.append(73)
    numbers.append(74)
    numbers.append(75)
    numbers.append(76)
    numbers.append(77)
    numbers.append(78)
    numbers.append(79)
    numbers.append(80)
    numbers.append(81)
    numbers.append(82)
    numbers.append(83)
    numbers.append(84)
    numbers.append(85)
    numbers.append(86)
    numbers.append(87)
    numbers.append(88)
    numbers.append(89)
    assertEquals(45, numbers[0])
    assertEquals(46, numbers[1])
    assertEquals(47, numbers[2])
    assertEquals(48, numbers[3])
    assertEquals(49, numbers[4])
    assertEquals(50, numbers[5])
    assertEquals(51, numbers[6])
    assertEquals(52, numbers[7])
    assertEquals(53, numbers[8])
    assertEquals(54, numbers[9])
    assertEquals(55, numbers[10])
    assertEquals(56, numbers[11])
    assertEquals(57, numbers[12])
    assertEquals(58, numbers[13])
    assertEquals(59, numbers[14])
    assertEquals(60, numbers[15])
    assertEquals(61, numbers[16])
    assertEquals(62, numbers[17])
    assertEquals(63, numbers[18])
    assertEquals(64, numbers[19])
    assertEquals(65, numbers[20])
    assertEquals(66, numbers[21])
    assertEquals(67, numbers[22])
    assertEquals(68, numbers[23])
    assertEquals(69, numbers[24])
    assertEquals(70, numbers[25])
    assertEquals(71, numbers[26])
    assertEquals(72, numbers[27])
    assertEquals(73, numbers[28])
    assertEquals(74, numbers[29])
    assertEquals(75, numbers[30])
    assertEquals(76, numbers[31])
    assertEquals(77, numbers[32])
    assertEquals(78, numbers[33])
    assertEquals(79, numbers[34])
    assertEquals(80, numbers[35])
    assertEquals(81, numbers[36])
    assertEquals(82, numbers[37])
    assertEquals(83, numbers[38])
    assertEquals(84, numbers[39])
    assertEquals(85, numbers[40])
    assertEquals(86, numbers[41])
    assertEquals(87, numbers[42])
    assertEquals(88, numbers[43])
    assertEquals(89, numbers[44])
    assertEquals(45, numbers.size)
  }

  @Test fun `test prepend bulk with default initial capacity`() {
    val numbers = ArrayList<Int>()
    numbers.prependBulk(
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      16,
      17,
      18,
      19,
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      27,
      28,
      29,
      30,
      31,
      32,
      33,
      34,
      35,
      36,
      37,
      38,
      39,
      40,
      41,
      42,
      43,
      44
    )
    assertEquals(0, numbers[0])
    assertEquals(1, numbers[1])
    assertEquals(2, numbers[2])
    assertEquals(3, numbers[3])
    assertEquals(4, numbers[4])
    assertEquals(5, numbers[5])
    assertEquals(6, numbers[6])
    assertEquals(7, numbers[7])
    assertEquals(8, numbers[8])
    assertEquals(9, numbers[9])
    assertEquals(10, numbers[10])
    assertEquals(11, numbers[11])
    assertEquals(12, numbers[12])
    assertEquals(13, numbers[13])
    assertEquals(14, numbers[14])
    assertEquals(15, numbers[15])
    assertEquals(16, numbers[16])
    assertEquals(17, numbers[17])
    assertEquals(18, numbers[18])
    assertEquals(19, numbers[19])
    assertEquals(20, numbers[20])
    assertEquals(21, numbers[21])
    assertEquals(22, numbers[22])
    assertEquals(23, numbers[23])
    assertEquals(24, numbers[24])
    assertEquals(25, numbers[25])
    assertEquals(26, numbers[26])
    assertEquals(27, numbers[27])
    assertEquals(28, numbers[28])
    assertEquals(29, numbers[29])
    assertEquals(30, numbers[30])
    assertEquals(31, numbers[31])
    assertEquals(32, numbers[32])
    assertEquals(33, numbers[33])
    assertEquals(34, numbers[34])
    assertEquals(35, numbers[35])
    assertEquals(36, numbers[36])
    assertEquals(37, numbers[37])
    assertEquals(38, numbers[38])
    assertEquals(39, numbers[39])
    assertEquals(40, numbers[40])
    assertEquals(41, numbers[41])
    assertEquals(42, numbers[42])
    assertEquals(43, numbers[43])
    assertEquals(44, numbers[44])
  }

  @Test fun `test prepend bulk with initial capacity equal to 16`() {
    val numbers = ArrayList<Int>(16)
    numbers.prependBulk(
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      16,
      17,
      18,
      19,
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      27,
      28,
      29,
      30,
      31,
      32,
      33,
      34,
      35,
      36,
      37,
      38,
      39,
      40,
      41,
      42,
      43,
      44
    )
    assertEquals(0, numbers[0])
    assertEquals(1, numbers[1])
    assertEquals(2, numbers[2])
    assertEquals(3, numbers[3])
    assertEquals(4, numbers[4])
    assertEquals(5, numbers[5])
    assertEquals(6, numbers[6])
    assertEquals(7, numbers[7])
    assertEquals(8, numbers[8])
    assertEquals(9, numbers[9])
    assertEquals(10, numbers[10])
    assertEquals(11, numbers[11])
    assertEquals(12, numbers[12])
    assertEquals(13, numbers[13])
    assertEquals(14, numbers[14])
    assertEquals(15, numbers[15])
    assertEquals(16, numbers[16])
    assertEquals(17, numbers[17])
    assertEquals(18, numbers[18])
    assertEquals(19, numbers[19])
    assertEquals(20, numbers[20])
    assertEquals(21, numbers[21])
    assertEquals(22, numbers[22])
    assertEquals(23, numbers[23])
    assertEquals(24, numbers[24])
    assertEquals(25, numbers[25])
    assertEquals(26, numbers[26])
    assertEquals(27, numbers[27])
    assertEquals(28, numbers[28])
    assertEquals(29, numbers[29])
    assertEquals(30, numbers[30])
    assertEquals(31, numbers[31])
    assertEquals(32, numbers[32])
    assertEquals(33, numbers[33])
    assertEquals(34, numbers[34])
    assertEquals(35, numbers[35])
    assertEquals(36, numbers[36])
    assertEquals(37, numbers[37])
    assertEquals(38, numbers[38])
    assertEquals(39, numbers[39])
    assertEquals(40, numbers[40])
    assertEquals(41, numbers[41])
    assertEquals(42, numbers[42])
    assertEquals(43, numbers[43])
    assertEquals(44, numbers[44])
  }

  @Test fun `test prepend with default initial capacity`() {
    val numbers = ArrayList<Int>()
    numbers.prepend(0)
    assertEquals(0, numbers[0])
    assertEquals(1, numbers.size)
    numbers.prepend(1)
    assertEquals(1, numbers[0])
    assertEquals(0, numbers[1])
    assertEquals(2, numbers.size)
    numbers.prepend(2)
    assertEquals(2, numbers[0])
    assertEquals(1, numbers[1])
    assertEquals(0, numbers[2])
    assertEquals(3, numbers.size)
    numbers.prepend(3)
    numbers.prepend(4)
    numbers.prepend(5)
    numbers.prepend(6)
    numbers.prepend(7)
    numbers.prepend(8)
    numbers.prepend(9)
    numbers.prepend(10)
    numbers.prepend(11)
    numbers.prepend(12)
    numbers.prepend(13)
    numbers.prepend(14)
    numbers.prepend(15)
    numbers.prepend(16)
    numbers.prepend(17)
    numbers.prepend(18)
    numbers.prepend(19)
    numbers.prepend(20)
    numbers.prepend(21)
    numbers.prepend(22)
    numbers.prepend(23)
    numbers.prepend(24)
    numbers.prepend(25)
    numbers.prepend(26)
    numbers.prepend(27)
    numbers.prepend(28)
    numbers.prepend(29)
    numbers.prepend(30)
    numbers.prepend(31)
    numbers.prepend(32)
    numbers.prepend(33)
    numbers.prepend(34)
    numbers.prepend(35)
    numbers.prepend(36)
    numbers.prepend(37)
    numbers.prepend(38)
    numbers.prepend(39)
    numbers.prepend(40)
    numbers.prepend(41)
    numbers.prepend(42)
    numbers.prepend(43)
    numbers.prepend(44)
    assertEquals(44, numbers[0])
    assertEquals(43, numbers[1])
    assertEquals(42, numbers[2])
    assertEquals(41, numbers[3])
    assertEquals(40, numbers[4])
    assertEquals(39, numbers[5])
    assertEquals(38, numbers[6])
    assertEquals(37, numbers[7])
    assertEquals(36, numbers[8])
    assertEquals(35, numbers[9])
    assertEquals(34, numbers[10])
    assertEquals(33, numbers[11])
    assertEquals(32, numbers[12])
    assertEquals(31, numbers[13])
    assertEquals(30, numbers[14])
    assertEquals(29, numbers[15])
    assertEquals(28, numbers[16])
    assertEquals(27, numbers[17])
    assertEquals(26, numbers[18])
    assertEquals(25, numbers[19])
    assertEquals(24, numbers[20])
    assertEquals(23, numbers[21])
    assertEquals(22, numbers[22])
    assertEquals(21, numbers[23])
    assertEquals(20, numbers[24])
    assertEquals(19, numbers[25])
    assertEquals(18, numbers[26])
    assertEquals(17, numbers[27])
    assertEquals(16, numbers[28])
    assertEquals(15, numbers[29])
    assertEquals(14, numbers[30])
    assertEquals(13, numbers[31])
    assertEquals(12, numbers[32])
    assertEquals(11, numbers[33])
    assertEquals(10, numbers[34])
    assertEquals(9, numbers[35])
    assertEquals(8, numbers[36])
    assertEquals(7, numbers[37])
    assertEquals(6, numbers[38])
    assertEquals(5, numbers[39])
    assertEquals(4, numbers[40])
    assertEquals(3, numbers[41])
    assertEquals(2, numbers[42])
    assertEquals(1, numbers[43])
    assertEquals(0, numbers[44])
    assertThrows(IllegalArgumentException::class.java) { numbers[-1] }
    assertThrows(IllegalArgumentException::class.java) { numbers[45] }
    assertEquals(45, numbers.size)
    numbers.clear()
    numbers.prepend(45)
    assertEquals(45, numbers[0])
    assertEquals(1, numbers.size)
    numbers.prepend(46)
    assertEquals(46, numbers[0])
    assertEquals(45, numbers[1])
    assertEquals(2, numbers.size)
    numbers.prepend(47)
    assertEquals(47, numbers[0])
    assertEquals(46, numbers[1])
    assertEquals(45, numbers[2])
    assertEquals(3, numbers.size)
    numbers.prepend(48)
    numbers.prepend(49)
    numbers.prepend(50)
    numbers.prepend(51)
    numbers.prepend(52)
    numbers.prepend(53)
    numbers.prepend(54)
    numbers.prepend(55)
    numbers.prepend(56)
    numbers.prepend(57)
    numbers.prepend(58)
    numbers.prepend(59)
    numbers.prepend(60)
    numbers.prepend(61)
    numbers.prepend(62)
    numbers.prepend(63)
    numbers.prepend(64)
    numbers.prepend(65)
    numbers.prepend(66)
    numbers.prepend(67)
    numbers.prepend(68)
    numbers.prepend(69)
    numbers.prepend(70)
    numbers.prepend(71)
    numbers.prepend(72)
    numbers.prepend(73)
    numbers.prepend(74)
    numbers.prepend(75)
    numbers.prepend(76)
    numbers.prepend(77)
    numbers.prepend(78)
    numbers.prepend(79)
    numbers.prepend(80)
    numbers.prepend(81)
    numbers.prepend(82)
    numbers.prepend(83)
    numbers.prepend(84)
    numbers.prepend(85)
    numbers.prepend(86)
    numbers.prepend(87)
    numbers.prepend(88)
    numbers.prepend(89)
    assertEquals(89, numbers[0])
    assertEquals(88, numbers[1])
    assertEquals(87, numbers[2])
    assertEquals(86, numbers[3])
    assertEquals(85, numbers[4])
    assertEquals(84, numbers[5])
    assertEquals(83, numbers[6])
    assertEquals(82, numbers[7])
    assertEquals(81, numbers[8])
    assertEquals(80, numbers[9])
    assertEquals(79, numbers[10])
    assertEquals(78, numbers[11])
    assertEquals(77, numbers[12])
    assertEquals(76, numbers[13])
    assertEquals(75, numbers[14])
    assertEquals(74, numbers[15])
    assertEquals(73, numbers[16])
    assertEquals(72, numbers[17])
    assertEquals(71, numbers[18])
    assertEquals(70, numbers[19])
    assertEquals(69, numbers[20])
    assertEquals(68, numbers[21])
    assertEquals(67, numbers[22])
    assertEquals(66, numbers[23])
    assertEquals(65, numbers[24])
    assertEquals(64, numbers[25])
    assertEquals(63, numbers[26])
    assertEquals(62, numbers[27])
    assertEquals(61, numbers[28])
    assertEquals(60, numbers[29])
    assertEquals(59, numbers[30])
    assertEquals(58, numbers[31])
    assertEquals(57, numbers[32])
    assertEquals(56, numbers[33])
    assertEquals(55, numbers[34])
    assertEquals(54, numbers[35])
    assertEquals(53, numbers[36])
    assertEquals(52, numbers[37])
    assertEquals(51, numbers[38])
    assertEquals(50, numbers[39])
    assertEquals(49, numbers[40])
    assertEquals(48, numbers[41])
    assertEquals(47, numbers[42])
    assertEquals(46, numbers[43])
    assertEquals(45, numbers[44])
    assertEquals(45, numbers.size)
  }

  @Test fun `test prepend with initial capacity equal to 16`() {
    val numbers = ArrayList<Int>(16)
    numbers.prepend(0)
    assertEquals(0, numbers[0])
    assertEquals(1, numbers.size)
    numbers.prepend(1)
    assertEquals(1, numbers[0])
    assertEquals(0, numbers[1])
    assertEquals(2, numbers.size)
    numbers.prepend(2)
    assertEquals(2, numbers[0])
    assertEquals(1, numbers[1])
    assertEquals(0, numbers[2])
    assertEquals(3, numbers.size)
    numbers.prepend(3)
    numbers.prepend(4)
    numbers.prepend(5)
    numbers.prepend(6)
    numbers.prepend(7)
    numbers.prepend(8)
    numbers.prepend(9)
    numbers.prepend(10)
    numbers.prepend(11)
    numbers.prepend(12)
    numbers.prepend(13)
    numbers.prepend(14)
    numbers.prepend(15)
    numbers.prepend(16)
    numbers.prepend(17)
    numbers.prepend(18)
    numbers.prepend(19)
    numbers.prepend(20)
    numbers.prepend(21)
    numbers.prepend(22)
    numbers.prepend(23)
    numbers.prepend(24)
    numbers.prepend(25)
    numbers.prepend(26)
    numbers.prepend(27)
    numbers.prepend(28)
    numbers.prepend(29)
    numbers.prepend(30)
    numbers.prepend(31)
    numbers.prepend(32)
    numbers.prepend(33)
    numbers.prepend(34)
    numbers.prepend(35)
    numbers.prepend(36)
    numbers.prepend(37)
    numbers.prepend(38)
    numbers.prepend(39)
    numbers.prepend(40)
    numbers.prepend(41)
    numbers.prepend(42)
    numbers.prepend(43)
    numbers.prepend(44)
    assertEquals(44, numbers[0])
    assertEquals(43, numbers[1])
    assertEquals(42, numbers[2])
    assertEquals(41, numbers[3])
    assertEquals(40, numbers[4])
    assertEquals(39, numbers[5])
    assertEquals(38, numbers[6])
    assertEquals(37, numbers[7])
    assertEquals(36, numbers[8])
    assertEquals(35, numbers[9])
    assertEquals(34, numbers[10])
    assertEquals(33, numbers[11])
    assertEquals(32, numbers[12])
    assertEquals(31, numbers[13])
    assertEquals(30, numbers[14])
    assertEquals(29, numbers[15])
    assertEquals(28, numbers[16])
    assertEquals(27, numbers[17])
    assertEquals(26, numbers[18])
    assertEquals(25, numbers[19])
    assertEquals(24, numbers[20])
    assertEquals(23, numbers[21])
    assertEquals(22, numbers[22])
    assertEquals(21, numbers[23])
    assertEquals(20, numbers[24])
    assertEquals(19, numbers[25])
    assertEquals(18, numbers[26])
    assertEquals(17, numbers[27])
    assertEquals(16, numbers[28])
    assertEquals(15, numbers[29])
    assertEquals(14, numbers[30])
    assertEquals(13, numbers[31])
    assertEquals(12, numbers[32])
    assertEquals(11, numbers[33])
    assertEquals(10, numbers[34])
    assertEquals(9, numbers[35])
    assertEquals(8, numbers[36])
    assertEquals(7, numbers[37])
    assertEquals(6, numbers[38])
    assertEquals(5, numbers[39])
    assertEquals(4, numbers[40])
    assertEquals(3, numbers[41])
    assertEquals(2, numbers[42])
    assertEquals(1, numbers[43])
    assertEquals(0, numbers[44])
    assertThrows(IllegalArgumentException::class.java) { numbers[-1] }
    assertThrows(IllegalArgumentException::class.java) { numbers[45] }
    assertEquals(45, numbers.size)
    numbers.clear()
    numbers.prepend(45)
    assertEquals(45, numbers[0])
    assertEquals(1, numbers.size)
    numbers.prepend(46)
    assertEquals(46, numbers[0])
    assertEquals(45, numbers[1])
    assertEquals(2, numbers.size)
    numbers.prepend(47)
    assertEquals(47, numbers[0])
    assertEquals(46, numbers[1])
    assertEquals(45, numbers[2])
    assertEquals(3, numbers.size)
    numbers.prepend(48)
    numbers.prepend(49)
    numbers.prepend(50)
    numbers.prepend(51)
    numbers.prepend(52)
    numbers.prepend(53)
    numbers.prepend(54)
    numbers.prepend(55)
    numbers.prepend(56)
    numbers.prepend(57)
    numbers.prepend(58)
    numbers.prepend(59)
    numbers.prepend(60)
    numbers.prepend(61)
    numbers.prepend(62)
    numbers.prepend(63)
    numbers.prepend(64)
    numbers.prepend(65)
    numbers.prepend(66)
    numbers.prepend(67)
    numbers.prepend(68)
    numbers.prepend(69)
    numbers.prepend(70)
    numbers.prepend(71)
    numbers.prepend(72)
    numbers.prepend(73)
    numbers.prepend(74)
    numbers.prepend(75)
    numbers.prepend(76)
    numbers.prepend(77)
    numbers.prepend(78)
    numbers.prepend(79)
    numbers.prepend(80)
    numbers.prepend(81)
    numbers.prepend(82)
    numbers.prepend(83)
    numbers.prepend(84)
    numbers.prepend(85)
    numbers.prepend(86)
    numbers.prepend(87)
    numbers.prepend(88)
    numbers.prepend(89)
    assertEquals(89, numbers[0])
    assertEquals(88, numbers[1])
    assertEquals(87, numbers[2])
    assertEquals(86, numbers[3])
    assertEquals(85, numbers[4])
    assertEquals(84, numbers[5])
    assertEquals(83, numbers[6])
    assertEquals(82, numbers[7])
    assertEquals(81, numbers[8])
    assertEquals(80, numbers[9])
    assertEquals(79, numbers[10])
    assertEquals(78, numbers[11])
    assertEquals(77, numbers[12])
    assertEquals(76, numbers[13])
    assertEquals(75, numbers[14])
    assertEquals(74, numbers[15])
    assertEquals(73, numbers[16])
    assertEquals(72, numbers[17])
    assertEquals(71, numbers[18])
    assertEquals(70, numbers[19])
    assertEquals(69, numbers[20])
    assertEquals(68, numbers[21])
    assertEquals(67, numbers[22])
    assertEquals(66, numbers[23])
    assertEquals(65, numbers[24])
    assertEquals(64, numbers[25])
    assertEquals(63, numbers[26])
    assertEquals(62, numbers[27])
    assertEquals(61, numbers[28])
    assertEquals(60, numbers[29])
    assertEquals(59, numbers[30])
    assertEquals(58, numbers[31])
    assertEquals(57, numbers[32])
    assertEquals(56, numbers[33])
    assertEquals(55, numbers[34])
    assertEquals(54, numbers[35])
    assertEquals(53, numbers[36])
    assertEquals(52, numbers[37])
    assertEquals(51, numbers[38])
    assertEquals(50, numbers[39])
    assertEquals(49, numbers[40])
    assertEquals(48, numbers[41])
    assertEquals(47, numbers[42])
    assertEquals(46, numbers[43])
    assertEquals(45, numbers[44])
    assertEquals(45, numbers.size)
  }

  @Test fun `test insert with default initial capacity`() {
    val numbers = ArrayList<Int>()
    numbers.insert(0, 0)
    assertEquals(0, numbers[0])
    assertEquals(1, numbers.size)
    numbers.insert(0, 1)
    assertEquals(1, numbers[0])
    assertEquals(0, numbers[1])
    assertEquals(2, numbers.size)
    numbers.insert(0, 2)
    assertEquals(2, numbers[0])
    assertEquals(1, numbers[1])
    assertEquals(0, numbers[2])
    assertEquals(3, numbers.size)
    numbers.insert(1, 3)
    assertEquals(2, numbers[0])
    assertEquals(3, numbers[1])
    assertEquals(1, numbers[2])
    assertEquals(0, numbers[3])
    assertEquals(4, numbers.size)
    numbers.insert(2, 4)
    assertEquals(2, numbers[0])
    assertEquals(3, numbers[1])
    assertEquals(4, numbers[2])
    assertEquals(1, numbers[3])
    assertEquals(0, numbers[4])
    assertEquals(5, numbers.size)
    numbers.insert(3, 5)
    numbers.insert(4, 6)
    numbers.insert(5, 7)
    numbers.insert(6, 8)
    numbers.insert(7, 9)
    numbers.insert(8, 10)
    numbers.insert(9, 11)
    numbers.insert(10, 12)
    numbers.insert(11, 13)
    numbers.insert(12, 14)
    numbers.insert(13, 15)
    numbers.insert(14, 16)
    numbers.insert(15, 17)
    numbers.insert(16, 18)
    numbers.insert(17, 19)
    numbers.insert(18, 20)
    numbers.insert(19, 21)
    numbers.insert(20, 22)
    numbers.insert(21, 23)
    numbers.insert(22, 24)
    numbers.insert(23, 25)
    numbers.insert(24, 26)
    numbers.insert(25, 27)
    numbers.insert(26, 28)
    numbers.insert(27, 29)
    numbers.insert(28, 30)
    numbers.insert(29, 31)
    numbers.insert(30, 32)
    numbers.insert(31, 33)
    numbers.insert(32, 34)
    numbers.insert(33, 35)
    numbers.insert(34, 36)
    numbers.insert(35, 37)
    numbers.insert(36, 38)
    numbers.insert(37, 39)
    numbers.insert(32, 40)
    numbers.insert(31, 41)
    numbers.insert(16, 42)
    numbers.insert(17, 43)
    numbers.insert(18, 44)
    assertThrows(IllegalArgumentException::class.java) { numbers.insert(-1, 0) }
    assertThrows(IllegalArgumentException::class.java) { numbers.insert(46, 0) }
    assertEquals(2, numbers[0])
    assertEquals(3, numbers[1])
    assertEquals(4, numbers[2])
    assertEquals(5, numbers[3])
    assertEquals(6, numbers[4])
    assertEquals(7, numbers[5])
    assertEquals(8, numbers[6])
    assertEquals(9, numbers[7])
    assertEquals(10, numbers[8])
    assertEquals(11, numbers[9])
    assertEquals(12, numbers[10])
    assertEquals(13, numbers[11])
    assertEquals(14, numbers[12])
    assertEquals(15, numbers[13])
    assertEquals(16, numbers[14])
    assertEquals(17, numbers[15])
    assertEquals(42, numbers[16])
    assertEquals(43, numbers[17])
    assertEquals(44, numbers[18])
    assertEquals(18, numbers[19])
    assertEquals(19, numbers[20])
    assertEquals(20, numbers[21])
    assertEquals(21, numbers[22])
    assertEquals(22, numbers[23])
    assertEquals(23, numbers[24])
    assertEquals(24, numbers[25])
    assertEquals(25, numbers[26])
    assertEquals(26, numbers[27])
    assertEquals(27, numbers[28])
    assertEquals(28, numbers[29])
    assertEquals(29, numbers[30])
    assertEquals(30, numbers[31])
    assertEquals(31, numbers[32])
    assertEquals(32, numbers[33])
    assertEquals(41, numbers[34])
    assertEquals(33, numbers[35])
    assertEquals(40, numbers[36])
    assertEquals(34, numbers[37])
    assertEquals(35, numbers[38])
    assertEquals(36, numbers[39])
    assertEquals(37, numbers[40])
    assertEquals(38, numbers[41])
    assertEquals(39, numbers[42])
    assertEquals(1, numbers[43])
    assertEquals(0, numbers[44])
    assertThrows(IllegalArgumentException::class.java) { numbers[-1] }
    assertThrows(IllegalArgumentException::class.java) { numbers[45] }
    assertEquals(45, numbers.size)
    numbers.clear()
    numbers.insert(0, 45)
    assertEquals(45, numbers[0])
    assertEquals(1, numbers.size)
    numbers.insert(0, 46)
    assertEquals(46, numbers[0])
    assertEquals(45, numbers[1])
    assertEquals(2, numbers.size)
    numbers.insert(0, 47)
    assertEquals(47, numbers[0])
    assertEquals(46, numbers[1])
    assertEquals(45, numbers[2])
    assertEquals(3, numbers.size)
    numbers.insert(1, 48)
    assertEquals(47, numbers[0])
    assertEquals(48, numbers[1])
    assertEquals(46, numbers[2])
    assertEquals(45, numbers[3])
    assertEquals(4, numbers.size)
    numbers.insert(2, 49)
    assertEquals(47, numbers[0])
    assertEquals(48, numbers[1])
    assertEquals(49, numbers[2])
    assertEquals(46, numbers[3])
    assertEquals(45, numbers[4])
    assertEquals(5, numbers.size)
    numbers.insert(3, 50)
    numbers.insert(4, 51)
    numbers.insert(5, 52)
    numbers.insert(6, 53)
    numbers.insert(7, 54)
    numbers.insert(8, 55)
    numbers.insert(9, 56)
    numbers.insert(10, 57)
    numbers.insert(11, 58)
    numbers.insert(12, 59)
    numbers.insert(13, 60)
    numbers.insert(14, 61)
    numbers.insert(15, 62)
    numbers.insert(16, 63)
    numbers.insert(17, 64)
    numbers.insert(18, 65)
    numbers.insert(19, 66)
    numbers.insert(20, 67)
    numbers.insert(21, 68)
    numbers.insert(22, 69)
    numbers.insert(23, 70)
    numbers.insert(24, 71)
    numbers.insert(25, 72)
    numbers.insert(26, 73)
    numbers.insert(27, 74)
    numbers.insert(28, 75)
    numbers.insert(29, 76)
    numbers.insert(30, 77)
    numbers.insert(31, 78)
    numbers.insert(32, 79)
    numbers.insert(33, 80)
    numbers.insert(34, 81)
    numbers.insert(35, 82)
    numbers.insert(36, 83)
    numbers.insert(37, 84)
    numbers.insert(32, 85)
    numbers.insert(31, 86)
    numbers.insert(16, 87)
    numbers.insert(17, 88)
    numbers.insert(18, 89)
    assertThrows(IllegalArgumentException::class.java) { numbers.insert(-1, 0) }
    assertThrows(IllegalArgumentException::class.java) { numbers.insert(46, 0) }
    assertEquals(47, numbers[0])
    assertEquals(48, numbers[1])
    assertEquals(49, numbers[2])
    assertEquals(50, numbers[3])
    assertEquals(51, numbers[4])
    assertEquals(52, numbers[5])
    assertEquals(53, numbers[6])
    assertEquals(54, numbers[7])
    assertEquals(55, numbers[8])
    assertEquals(56, numbers[9])
    assertEquals(57, numbers[10])
    assertEquals(58, numbers[11])
    assertEquals(59, numbers[12])
    assertEquals(60, numbers[13])
    assertEquals(61, numbers[14])
    assertEquals(62, numbers[15])
    assertEquals(87, numbers[16])
    assertEquals(88, numbers[17])
    assertEquals(89, numbers[18])
    assertEquals(63, numbers[19])
    assertEquals(64, numbers[20])
    assertEquals(65, numbers[21])
    assertEquals(66, numbers[22])
    assertEquals(67, numbers[23])
    assertEquals(68, numbers[24])
    assertEquals(69, numbers[25])
    assertEquals(70, numbers[26])
    assertEquals(71, numbers[27])
    assertEquals(72, numbers[28])
    assertEquals(73, numbers[29])
    assertEquals(74, numbers[30])
    assertEquals(75, numbers[31])
    assertEquals(76, numbers[32])
    assertEquals(77, numbers[33])
    assertEquals(86, numbers[34])
    assertEquals(78, numbers[35])
    assertEquals(85, numbers[36])
    assertEquals(79, numbers[37])
    assertEquals(80, numbers[38])
    assertEquals(81, numbers[39])
    assertEquals(82, numbers[40])
    assertEquals(83, numbers[41])
    assertEquals(84, numbers[42])
    assertEquals(46, numbers[43])
    assertEquals(45, numbers[44])
    assertEquals(45, numbers.size)
  }

  @Test fun `test insert with initial capacity equal to 16`() {
    val numbers = ArrayList<Int>(16)
    numbers.insert(0, 0)
    assertEquals(0, numbers[0])
    assertEquals(1, numbers.size)
    numbers.insert(0, 1)
    assertEquals(1, numbers[0])
    assertEquals(0, numbers[1])
    assertEquals(2, numbers.size)
    numbers.insert(0, 2)
    assertEquals(2, numbers[0])
    assertEquals(1, numbers[1])
    assertEquals(0, numbers[2])
    assertEquals(3, numbers.size)
    numbers.insert(1, 3)
    assertEquals(2, numbers[0])
    assertEquals(3, numbers[1])
    assertEquals(1, numbers[2])
    assertEquals(0, numbers[3])
    assertEquals(4, numbers.size)
    numbers.insert(2, 4)
    assertEquals(2, numbers[0])
    assertEquals(3, numbers[1])
    assertEquals(4, numbers[2])
    assertEquals(1, numbers[3])
    assertEquals(0, numbers[4])
    assertEquals(5, numbers.size)
    numbers.insert(3, 5)
    numbers.insert(4, 6)
    numbers.insert(5, 7)
    numbers.insert(6, 8)
    numbers.insert(7, 9)
    numbers.insert(8, 10)
    numbers.insert(9, 11)
    numbers.insert(10, 12)
    numbers.insert(11, 13)
    numbers.insert(12, 14)
    numbers.insert(13, 15)
    numbers.insert(14, 16)
    numbers.insert(15, 17)
    numbers.insert(16, 18)
    numbers.insert(17, 19)
    numbers.insert(18, 20)
    numbers.insert(19, 21)
    numbers.insert(20, 22)
    numbers.insert(21, 23)
    numbers.insert(22, 24)
    numbers.insert(23, 25)
    numbers.insert(24, 26)
    numbers.insert(25, 27)
    numbers.insert(26, 28)
    numbers.insert(27, 29)
    numbers.insert(28, 30)
    numbers.insert(29, 31)
    numbers.insert(30, 32)
    numbers.insert(31, 33)
    numbers.insert(32, 34)
    numbers.insert(33, 35)
    numbers.insert(34, 36)
    numbers.insert(35, 37)
    numbers.insert(36, 38)
    numbers.insert(37, 39)
    numbers.insert(32, 40)
    numbers.insert(31, 41)
    numbers.insert(16, 42)
    numbers.insert(17, 43)
    numbers.insert(18, 44)
    assertThrows(IllegalArgumentException::class.java) { numbers.insert(-1, 0) }
    assertThrows(IllegalArgumentException::class.java) { numbers.insert(46, 0) }
    assertEquals(2, numbers[0])
    assertEquals(3, numbers[1])
    assertEquals(4, numbers[2])
    assertEquals(5, numbers[3])
    assertEquals(6, numbers[4])
    assertEquals(7, numbers[5])
    assertEquals(8, numbers[6])
    assertEquals(9, numbers[7])
    assertEquals(10, numbers[8])
    assertEquals(11, numbers[9])
    assertEquals(12, numbers[10])
    assertEquals(13, numbers[11])
    assertEquals(14, numbers[12])
    assertEquals(15, numbers[13])
    assertEquals(16, numbers[14])
    assertEquals(17, numbers[15])
    assertEquals(42, numbers[16])
    assertEquals(43, numbers[17])
    assertEquals(44, numbers[18])
    assertEquals(18, numbers[19])
    assertEquals(19, numbers[20])
    assertEquals(20, numbers[21])
    assertEquals(21, numbers[22])
    assertEquals(22, numbers[23])
    assertEquals(23, numbers[24])
    assertEquals(24, numbers[25])
    assertEquals(25, numbers[26])
    assertEquals(26, numbers[27])
    assertEquals(27, numbers[28])
    assertEquals(28, numbers[29])
    assertEquals(29, numbers[30])
    assertEquals(30, numbers[31])
    assertEquals(31, numbers[32])
    assertEquals(32, numbers[33])
    assertEquals(41, numbers[34])
    assertEquals(33, numbers[35])
    assertEquals(40, numbers[36])
    assertEquals(34, numbers[37])
    assertEquals(35, numbers[38])
    assertEquals(36, numbers[39])
    assertEquals(37, numbers[40])
    assertEquals(38, numbers[41])
    assertEquals(39, numbers[42])
    assertEquals(1, numbers[43])
    assertEquals(0, numbers[44])
    assertThrows(IllegalArgumentException::class.java) { numbers[-1] }
    assertThrows(IllegalArgumentException::class.java) { numbers[45] }
    assertEquals(45, numbers.size)
    numbers.clear()
    numbers.insert(0, 45)
    assertEquals(45, numbers[0])
    assertEquals(1, numbers.size)
    numbers.insert(0, 46)
    assertEquals(46, numbers[0])
    assertEquals(45, numbers[1])
    assertEquals(2, numbers.size)
    numbers.insert(0, 47)
    assertEquals(47, numbers[0])
    assertEquals(46, numbers[1])
    assertEquals(45, numbers[2])
    assertEquals(3, numbers.size)
    numbers.insert(1, 48)
    assertEquals(47, numbers[0])
    assertEquals(48, numbers[1])
    assertEquals(46, numbers[2])
    assertEquals(45, numbers[3])
    assertEquals(4, numbers.size)
    numbers.insert(2, 49)
    assertEquals(47, numbers[0])
    assertEquals(48, numbers[1])
    assertEquals(49, numbers[2])
    assertEquals(46, numbers[3])
    assertEquals(45, numbers[4])
    assertEquals(5, numbers.size)
    numbers.insert(3, 50)
    numbers.insert(4, 51)
    numbers.insert(5, 52)
    numbers.insert(6, 53)
    numbers.insert(7, 54)
    numbers.insert(8, 55)
    numbers.insert(9, 56)
    numbers.insert(10, 57)
    numbers.insert(11, 58)
    numbers.insert(12, 59)
    numbers.insert(13, 60)
    numbers.insert(14, 61)
    numbers.insert(15, 62)
    numbers.insert(16, 63)
    numbers.insert(17, 64)
    numbers.insert(18, 65)
    numbers.insert(19, 66)
    numbers.insert(20, 67)
    numbers.insert(21, 68)
    numbers.insert(22, 69)
    numbers.insert(23, 70)
    numbers.insert(24, 71)
    numbers.insert(25, 72)
    numbers.insert(26, 73)
    numbers.insert(27, 74)
    numbers.insert(28, 75)
    numbers.insert(29, 76)
    numbers.insert(30, 77)
    numbers.insert(31, 78)
    numbers.insert(32, 79)
    numbers.insert(33, 80)
    numbers.insert(34, 81)
    numbers.insert(35, 82)
    numbers.insert(36, 83)
    numbers.insert(37, 84)
    numbers.insert(32, 85)
    numbers.insert(31, 86)
    numbers.insert(16, 87)
    numbers.insert(17, 88)
    numbers.insert(18, 89)
    assertThrows(IllegalArgumentException::class.java) { numbers.insert(-1, 0) }
    assertThrows(IllegalArgumentException::class.java) { numbers.insert(46, 0) }
    assertEquals(47, numbers[0])
    assertEquals(48, numbers[1])
    assertEquals(49, numbers[2])
    assertEquals(50, numbers[3])
    assertEquals(51, numbers[4])
    assertEquals(52, numbers[5])
    assertEquals(53, numbers[6])
    assertEquals(54, numbers[7])
    assertEquals(55, numbers[8])
    assertEquals(56, numbers[9])
    assertEquals(57, numbers[10])
    assertEquals(58, numbers[11])
    assertEquals(59, numbers[12])
    assertEquals(60, numbers[13])
    assertEquals(61, numbers[14])
    assertEquals(62, numbers[15])
    assertEquals(87, numbers[16])
    assertEquals(88, numbers[17])
    assertEquals(89, numbers[18])
    assertEquals(63, numbers[19])
    assertEquals(64, numbers[20])
    assertEquals(65, numbers[21])
    assertEquals(66, numbers[22])
    assertEquals(67, numbers[23])
    assertEquals(68, numbers[24])
    assertEquals(69, numbers[25])
    assertEquals(70, numbers[26])
    assertEquals(71, numbers[27])
    assertEquals(72, numbers[28])
    assertEquals(73, numbers[29])
    assertEquals(74, numbers[30])
    assertEquals(75, numbers[31])
    assertEquals(76, numbers[32])
    assertEquals(77, numbers[33])
    assertEquals(86, numbers[34])
    assertEquals(78, numbers[35])
    assertEquals(85, numbers[36])
    assertEquals(79, numbers[37])
    assertEquals(80, numbers[38])
    assertEquals(81, numbers[39])
    assertEquals(82, numbers[40])
    assertEquals(83, numbers[41])
    assertEquals(84, numbers[42])
    assertEquals(46, numbers[43])
    assertEquals(45, numbers[44])
    assertEquals(45, numbers.size)
  }

  @Test fun `test remove with default initial capacity`() {
    val numbers = ArrayList<Int>()
    assertThrows(IllegalStateException::class.java) { numbers.remove(0) }
    numbers.append(0)
    numbers.append(1)
    numbers.append(2)
    numbers.append(3)
    numbers.append(4)
    numbers.append(5)
    numbers.append(6)
    numbers.append(7)
    numbers.append(8)
    numbers.append(9)
    numbers.append(10)
    numbers.append(11)
    numbers.append(12)
    numbers.append(13)
    numbers.append(14)
    numbers.append(15)
    numbers.append(16)
    numbers.append(17)
    numbers.append(18)
    numbers.append(19)
    numbers.append(20)
    numbers.append(21)
    numbers.append(22)
    numbers.append(23)
    numbers.append(24)
    numbers.append(25)
    numbers.append(26)
    numbers.append(27)
    numbers.append(28)
    numbers.append(29)
    numbers.append(30)
    numbers.append(31)
    numbers.append(32)
    numbers.append(33)
    numbers.append(34)
    numbers.append(35)
    numbers.append(36)
    numbers.append(37)
    numbers.append(38)
    numbers.append(39)
    numbers.append(40)
    numbers.append(41)
    assertEquals(0, numbers.remove(0))
    assertEquals(41, numbers.size)
    assertEquals(17, numbers.remove(16))
    assertEquals(40, numbers.size)
    assertEquals(33, numbers.remove(31))
    assertEquals(39, numbers.size)
    assertEquals(35, numbers.remove(32))
    assertEquals(38, numbers.size)
    assertEquals(40, numbers.remove(36))
    assertEquals(37, numbers.size)
    assertEquals(41, numbers.remove(36))
    assertEquals(36, numbers.size)
    assertThrows(IllegalArgumentException::class.java) { numbers.remove(-1) }
    assertThrows(IllegalArgumentException::class.java) { numbers.remove(36) }
    numbers.clear()
    assertThrows(IllegalStateException::class.java) { numbers.remove(0) }
    numbers.append(42)
    numbers.append(43)
    numbers.append(44)
    numbers.append(45)
    numbers.append(46)
    numbers.append(47)
    numbers.append(48)
    numbers.append(49)
    numbers.append(50)
    numbers.append(51)
    numbers.append(52)
    numbers.append(53)
    numbers.append(54)
    numbers.append(55)
    numbers.append(56)
    numbers.append(57)
    numbers.append(58)
    numbers.append(59)
    numbers.append(60)
    numbers.append(61)
    numbers.append(62)
    numbers.append(63)
    numbers.append(64)
    numbers.append(65)
    numbers.append(66)
    numbers.append(67)
    numbers.append(68)
    numbers.append(69)
    numbers.append(70)
    numbers.append(71)
    numbers.append(72)
    numbers.append(73)
    numbers.append(74)
    numbers.append(75)
    numbers.append(76)
    numbers.append(77)
    numbers.append(78)
    numbers.append(79)
    numbers.append(80)
    numbers.append(81)
    numbers.append(82)
    numbers.append(83)
    assertEquals(42, numbers.remove(0))
    assertEquals(41, numbers.size)
    assertEquals(59, numbers.remove(16))
    assertEquals(40, numbers.size)
    assertEquals(75, numbers.remove(31))
    assertEquals(39, numbers.size)
    assertEquals(77, numbers.remove(32))
    assertEquals(38, numbers.size)
    assertEquals(82, numbers.remove(36))
    assertEquals(37, numbers.size)
    assertEquals(83, numbers.remove(36))
    assertEquals(36, numbers.size)
    assertThrows(IllegalArgumentException::class.java) { numbers.remove(-1) }
    assertThrows(IllegalArgumentException::class.java) { numbers.remove(36) }
  }

  @Test fun `test remove with initial capacity equal to 16`() {
    val numbers = ArrayList<Int>(16)
    assertThrows(IllegalStateException::class.java) { numbers.remove(0) }
    numbers.append(0)
    numbers.append(1)
    numbers.append(2)
    numbers.append(3)
    numbers.append(4)
    numbers.append(5)
    numbers.append(6)
    numbers.append(7)
    numbers.append(8)
    numbers.append(9)
    numbers.append(10)
    numbers.append(11)
    numbers.append(12)
    numbers.append(13)
    numbers.append(14)
    numbers.append(15)
    numbers.append(16)
    numbers.append(17)
    numbers.append(18)
    numbers.append(19)
    numbers.append(20)
    numbers.append(21)
    numbers.append(22)
    numbers.append(23)
    numbers.append(24)
    numbers.append(25)
    numbers.append(26)
    numbers.append(27)
    numbers.append(28)
    numbers.append(29)
    numbers.append(30)
    numbers.append(31)
    numbers.append(32)
    numbers.append(33)
    numbers.append(34)
    numbers.append(35)
    numbers.append(36)
    numbers.append(37)
    numbers.append(38)
    numbers.append(39)
    numbers.append(40)
    numbers.append(41)
    assertEquals(0, numbers.remove(0))
    assertEquals(41, numbers.size)
    assertEquals(17, numbers.remove(16))
    assertEquals(40, numbers.size)
    assertEquals(33, numbers.remove(31))
    assertEquals(39, numbers.size)
    assertEquals(35, numbers.remove(32))
    assertEquals(38, numbers.size)
    assertEquals(40, numbers.remove(36))
    assertEquals(37, numbers.size)
    assertEquals(41, numbers.remove(36))
    assertEquals(36, numbers.size)
    assertThrows(IllegalArgumentException::class.java) { numbers.remove(-1) }
    assertThrows(IllegalArgumentException::class.java) { numbers.remove(36) }
    numbers.clear()
    assertThrows(IllegalStateException::class.java) { numbers.remove(0) }
    numbers.append(42)
    numbers.append(43)
    numbers.append(44)
    numbers.append(45)
    numbers.append(46)
    numbers.append(47)
    numbers.append(48)
    numbers.append(49)
    numbers.append(50)
    numbers.append(51)
    numbers.append(52)
    numbers.append(53)
    numbers.append(54)
    numbers.append(55)
    numbers.append(56)
    numbers.append(57)
    numbers.append(58)
    numbers.append(59)
    numbers.append(60)
    numbers.append(61)
    numbers.append(62)
    numbers.append(63)
    numbers.append(64)
    numbers.append(65)
    numbers.append(66)
    numbers.append(67)
    numbers.append(68)
    numbers.append(69)
    numbers.append(70)
    numbers.append(71)
    numbers.append(72)
    numbers.append(73)
    numbers.append(74)
    numbers.append(75)
    numbers.append(76)
    numbers.append(77)
    numbers.append(78)
    numbers.append(79)
    numbers.append(80)
    numbers.append(81)
    numbers.append(82)
    numbers.append(83)
    assertEquals(42, numbers.remove(0))
    assertEquals(41, numbers.size)
    assertEquals(59, numbers.remove(16))
    assertEquals(40, numbers.size)
    assertEquals(75, numbers.remove(31))
    assertEquals(39, numbers.size)
    assertEquals(77, numbers.remove(32))
    assertEquals(38, numbers.size)
    assertEquals(82, numbers.remove(36))
    assertEquals(37, numbers.size)
    assertEquals(83, numbers.remove(36))
    assertEquals(36, numbers.size)
    assertThrows(IllegalArgumentException::class.java) { numbers.remove(-1) }
    assertThrows(IllegalArgumentException::class.java) { numbers.remove(36) }
  }

  @Test fun `test remove back with default initial capacity`() {
    val numbers = ArrayList<Int>()
    assertThrows(IllegalStateException::class.java) { numbers.removeBack() }
    numbers.append(0)
    numbers.append(1)
    numbers.append(2)
    numbers.append(3)
    numbers.append(4)
    numbers.append(5)
    numbers.append(6)
    numbers.append(7)
    numbers.append(8)
    numbers.append(9)
    numbers.append(10)
    numbers.append(11)
    numbers.append(12)
    numbers.append(13)
    numbers.append(14)
    numbers.append(15)
    numbers.append(16)
    numbers.append(17)
    numbers.append(18)
    numbers.append(19)
    numbers.append(20)
    numbers.append(21)
    numbers.append(22)
    numbers.append(23)
    numbers.append(24)
    numbers.append(25)
    numbers.append(26)
    numbers.append(27)
    numbers.append(28)
    numbers.append(29)
    numbers.append(30)
    numbers.append(31)
    numbers.append(32)
    numbers.append(33)
    numbers.append(34)
    numbers.append(35)
    numbers.append(36)
    numbers.append(37)
    numbers.append(38)
    numbers.append(39)
    numbers.append(40)
    numbers.append(41)
    assertEquals(41, numbers.removeBack())
    assertEquals(40, numbers.removeBack())
    assertEquals(39, numbers.removeBack())
    assertEquals(38, numbers.removeBack())
    assertEquals(37, numbers.removeBack())
    assertEquals(36, numbers.removeBack())
    assertEquals(35, numbers.removeBack())
    assertEquals(34, numbers.removeBack())
    assertEquals(33, numbers.removeBack())
    assertEquals(32, numbers.removeBack())
    assertEquals(31, numbers.removeBack())
    assertEquals(30, numbers.removeBack())
    assertEquals(29, numbers.removeBack())
    assertEquals(28, numbers.removeBack())
    assertEquals(27, numbers.removeBack())
    assertEquals(26, numbers.removeBack())
    assertEquals(25, numbers.removeBack())
    assertEquals(24, numbers.removeBack())
    assertEquals(23, numbers.removeBack())
    assertEquals(22, numbers.removeBack())
    assertEquals(21, numbers.removeBack())
    assertEquals(20, numbers.removeBack())
    assertEquals(19, numbers.removeBack())
    assertEquals(18, numbers.removeBack())
    assertEquals(17, numbers.removeBack())
    assertEquals(16, numbers.removeBack())
    assertEquals(15, numbers.removeBack())
    assertEquals(14, numbers.removeBack())
    assertEquals(13, numbers.removeBack())
    assertEquals(12, numbers.removeBack())
    assertEquals(11, numbers.removeBack())
    assertEquals(10, numbers.removeBack())
    assertEquals(9, numbers.removeBack())
    assertEquals(8, numbers.removeBack())
    assertEquals(7, numbers.removeBack())
    assertEquals(6, numbers.removeBack())
    assertEquals(5, numbers.removeBack())
    assertEquals(4, numbers.removeBack())
    assertEquals(3, numbers.removeBack())
    assertEquals(2, numbers.removeBack())
    assertEquals(1, numbers.removeBack())
    assertEquals(0, numbers.removeBack())
    assertEquals(0, numbers.size)
    numbers.append(42)
    numbers.append(43)
    numbers.append(44)
    numbers.append(45)
    numbers.append(46)
    numbers.append(47)
    numbers.append(48)
    numbers.append(49)
    numbers.append(50)
    numbers.append(51)
    numbers.append(52)
    numbers.append(53)
    numbers.append(54)
    numbers.append(55)
    numbers.append(56)
    numbers.append(57)
    numbers.append(58)
    numbers.append(59)
    numbers.append(60)
    numbers.append(61)
    numbers.append(62)
    numbers.append(63)
    numbers.append(64)
    numbers.append(65)
    numbers.append(66)
    numbers.append(67)
    numbers.append(68)
    numbers.append(69)
    numbers.append(70)
    numbers.append(71)
    numbers.append(72)
    numbers.append(73)
    numbers.append(74)
    numbers.append(75)
    numbers.append(76)
    numbers.append(77)
    numbers.append(78)
    numbers.append(79)
    numbers.append(80)
    numbers.append(81)
    numbers.append(82)
    numbers.append(83)
    assertEquals(83, numbers.removeBack())
    assertEquals(82, numbers.removeBack())
    assertEquals(81, numbers.removeBack())
    assertEquals(80, numbers.removeBack())
    assertEquals(79, numbers.removeBack())
    assertEquals(78, numbers.removeBack())
    assertEquals(77, numbers.removeBack())
    assertEquals(76, numbers.removeBack())
    assertEquals(75, numbers.removeBack())
    assertEquals(74, numbers.removeBack())
    assertEquals(73, numbers.removeBack())
    assertEquals(72, numbers.removeBack())
    assertEquals(71, numbers.removeBack())
    assertEquals(70, numbers.removeBack())
    assertEquals(69, numbers.removeBack())
    assertEquals(68, numbers.removeBack())
    assertEquals(67, numbers.removeBack())
    assertEquals(66, numbers.removeBack())
    assertEquals(65, numbers.removeBack())
    assertEquals(64, numbers.removeBack())
    assertEquals(63, numbers.removeBack())
    assertEquals(62, numbers.removeBack())
    assertEquals(61, numbers.removeBack())
    assertEquals(60, numbers.removeBack())
    assertEquals(59, numbers.removeBack())
    assertEquals(58, numbers.removeBack())
    assertEquals(57, numbers.removeBack())
    assertEquals(56, numbers.removeBack())
    assertEquals(55, numbers.removeBack())
    assertEquals(54, numbers.removeBack())
    assertEquals(53, numbers.removeBack())
    assertEquals(52, numbers.removeBack())
    assertEquals(51, numbers.removeBack())
    assertEquals(50, numbers.removeBack())
    assertEquals(49, numbers.removeBack())
    assertEquals(48, numbers.removeBack())
    assertEquals(47, numbers.removeBack())
    assertEquals(46, numbers.removeBack())
    assertEquals(45, numbers.removeBack())
    assertEquals(44, numbers.removeBack())
    assertEquals(43, numbers.removeBack())
    assertEquals(42, numbers.removeBack())
    assertEquals(0, numbers.size)
  }

  @Test fun `test remove back with initial capacity equal to 16`() {
    val numbers = ArrayList<Int>(16)
    assertThrows(IllegalStateException::class.java) { numbers.removeBack() }
    numbers.append(0)
    numbers.append(1)
    numbers.append(2)
    numbers.append(3)
    numbers.append(4)
    numbers.append(5)
    numbers.append(6)
    numbers.append(7)
    numbers.append(8)
    numbers.append(9)
    numbers.append(10)
    numbers.append(11)
    numbers.append(12)
    numbers.append(13)
    numbers.append(14)
    numbers.append(15)
    numbers.append(16)
    numbers.append(17)
    numbers.append(18)
    numbers.append(19)
    numbers.append(20)
    numbers.append(21)
    numbers.append(22)
    numbers.append(23)
    numbers.append(24)
    numbers.append(25)
    numbers.append(26)
    numbers.append(27)
    numbers.append(28)
    numbers.append(29)
    numbers.append(30)
    numbers.append(31)
    numbers.append(32)
    numbers.append(33)
    numbers.append(34)
    numbers.append(35)
    numbers.append(36)
    numbers.append(37)
    numbers.append(38)
    numbers.append(39)
    numbers.append(40)
    numbers.append(41)
    assertEquals(41, numbers.removeBack())
    assertEquals(40, numbers.removeBack())
    assertEquals(39, numbers.removeBack())
    assertEquals(38, numbers.removeBack())
    assertEquals(37, numbers.removeBack())
    assertEquals(36, numbers.removeBack())
    assertEquals(35, numbers.removeBack())
    assertEquals(34, numbers.removeBack())
    assertEquals(33, numbers.removeBack())
    assertEquals(32, numbers.removeBack())
    assertEquals(31, numbers.removeBack())
    assertEquals(30, numbers.removeBack())
    assertEquals(29, numbers.removeBack())
    assertEquals(28, numbers.removeBack())
    assertEquals(27, numbers.removeBack())
    assertEquals(26, numbers.removeBack())
    assertEquals(25, numbers.removeBack())
    assertEquals(24, numbers.removeBack())
    assertEquals(23, numbers.removeBack())
    assertEquals(22, numbers.removeBack())
    assertEquals(21, numbers.removeBack())
    assertEquals(20, numbers.removeBack())
    assertEquals(19, numbers.removeBack())
    assertEquals(18, numbers.removeBack())
    assertEquals(17, numbers.removeBack())
    assertEquals(16, numbers.removeBack())
    assertEquals(15, numbers.removeBack())
    assertEquals(14, numbers.removeBack())
    assertEquals(13, numbers.removeBack())
    assertEquals(12, numbers.removeBack())
    assertEquals(11, numbers.removeBack())
    assertEquals(10, numbers.removeBack())
    assertEquals(9, numbers.removeBack())
    assertEquals(8, numbers.removeBack())
    assertEquals(7, numbers.removeBack())
    assertEquals(6, numbers.removeBack())
    assertEquals(5, numbers.removeBack())
    assertEquals(4, numbers.removeBack())
    assertEquals(3, numbers.removeBack())
    assertEquals(2, numbers.removeBack())
    assertEquals(1, numbers.removeBack())
    assertEquals(0, numbers.removeBack())
    assertEquals(0, numbers.size)
    numbers.append(42)
    numbers.append(43)
    numbers.append(44)
    numbers.append(45)
    numbers.append(46)
    numbers.append(47)
    numbers.append(48)
    numbers.append(49)
    numbers.append(50)
    numbers.append(51)
    numbers.append(52)
    numbers.append(53)
    numbers.append(54)
    numbers.append(55)
    numbers.append(56)
    numbers.append(57)
    numbers.append(58)
    numbers.append(59)
    numbers.append(60)
    numbers.append(61)
    numbers.append(62)
    numbers.append(63)
    numbers.append(64)
    numbers.append(65)
    numbers.append(66)
    numbers.append(67)
    numbers.append(68)
    numbers.append(69)
    numbers.append(70)
    numbers.append(71)
    numbers.append(72)
    numbers.append(73)
    numbers.append(74)
    numbers.append(75)
    numbers.append(76)
    numbers.append(77)
    numbers.append(78)
    numbers.append(79)
    numbers.append(80)
    numbers.append(81)
    numbers.append(82)
    numbers.append(83)
    assertEquals(83, numbers.removeBack())
    assertEquals(82, numbers.removeBack())
    assertEquals(81, numbers.removeBack())
    assertEquals(80, numbers.removeBack())
    assertEquals(79, numbers.removeBack())
    assertEquals(78, numbers.removeBack())
    assertEquals(77, numbers.removeBack())
    assertEquals(76, numbers.removeBack())
    assertEquals(75, numbers.removeBack())
    assertEquals(74, numbers.removeBack())
    assertEquals(73, numbers.removeBack())
    assertEquals(72, numbers.removeBack())
    assertEquals(71, numbers.removeBack())
    assertEquals(70, numbers.removeBack())
    assertEquals(69, numbers.removeBack())
    assertEquals(68, numbers.removeBack())
    assertEquals(67, numbers.removeBack())
    assertEquals(66, numbers.removeBack())
    assertEquals(65, numbers.removeBack())
    assertEquals(64, numbers.removeBack())
    assertEquals(63, numbers.removeBack())
    assertEquals(62, numbers.removeBack())
    assertEquals(61, numbers.removeBack())
    assertEquals(60, numbers.removeBack())
    assertEquals(59, numbers.removeBack())
    assertEquals(58, numbers.removeBack())
    assertEquals(57, numbers.removeBack())
    assertEquals(56, numbers.removeBack())
    assertEquals(55, numbers.removeBack())
    assertEquals(54, numbers.removeBack())
    assertEquals(53, numbers.removeBack())
    assertEquals(52, numbers.removeBack())
    assertEquals(51, numbers.removeBack())
    assertEquals(50, numbers.removeBack())
    assertEquals(49, numbers.removeBack())
    assertEquals(48, numbers.removeBack())
    assertEquals(47, numbers.removeBack())
    assertEquals(46, numbers.removeBack())
    assertEquals(45, numbers.removeBack())
    assertEquals(44, numbers.removeBack())
    assertEquals(43, numbers.removeBack())
    assertEquals(42, numbers.removeBack())
    assertEquals(0, numbers.size)
  }

  @Test fun `test remove front with default initial capacity`() {
    val numbers = ArrayList<Int>()
    assertThrows(IllegalStateException::class.java) { numbers.removeFront() }
    numbers.append(0)
    numbers.append(1)
    numbers.append(2)
    numbers.append(3)
    numbers.append(4)
    numbers.append(5)
    numbers.append(6)
    numbers.append(7)
    numbers.append(8)
    numbers.append(9)
    numbers.append(10)
    numbers.append(11)
    numbers.append(12)
    numbers.append(13)
    numbers.append(14)
    numbers.append(15)
    numbers.append(16)
    numbers.append(17)
    numbers.append(18)
    numbers.append(19)
    numbers.append(20)
    numbers.append(21)
    numbers.append(22)
    numbers.append(23)
    numbers.append(24)
    numbers.append(25)
    numbers.append(26)
    numbers.append(27)
    numbers.append(28)
    numbers.append(29)
    numbers.append(30)
    numbers.append(31)
    numbers.append(32)
    numbers.append(33)
    numbers.append(34)
    numbers.append(35)
    numbers.append(36)
    numbers.append(37)
    numbers.append(38)
    numbers.append(39)
    numbers.append(40)
    numbers.append(41)
    assertEquals(0, numbers.removeFront())
    assertEquals(1, numbers.removeFront())
    assertEquals(2, numbers.removeFront())
    assertEquals(3, numbers.removeFront())
    assertEquals(4, numbers.removeFront())
    assertEquals(5, numbers.removeFront())
    assertEquals(6, numbers.removeFront())
    assertEquals(7, numbers.removeFront())
    assertEquals(8, numbers.removeFront())
    assertEquals(9, numbers.removeFront())
    assertEquals(10, numbers.removeFront())
    assertEquals(11, numbers.removeFront())
    assertEquals(12, numbers.removeFront())
    assertEquals(13, numbers.removeFront())
    assertEquals(14, numbers.removeFront())
    assertEquals(15, numbers.removeFront())
    assertEquals(16, numbers.removeFront())
    assertEquals(17, numbers.removeFront())
    assertEquals(18, numbers.removeFront())
    assertEquals(19, numbers.removeFront())
    assertEquals(20, numbers.removeFront())
    assertEquals(21, numbers.removeFront())
    assertEquals(22, numbers.removeFront())
    assertEquals(23, numbers.removeFront())
    assertEquals(24, numbers.removeFront())
    assertEquals(25, numbers.removeFront())
    assertEquals(26, numbers.removeFront())
    assertEquals(27, numbers.removeFront())
    assertEquals(28, numbers.removeFront())
    assertEquals(29, numbers.removeFront())
    assertEquals(30, numbers.removeFront())
    assertEquals(31, numbers.removeFront())
    assertEquals(32, numbers.removeFront())
    assertEquals(33, numbers.removeFront())
    assertEquals(34, numbers.removeFront())
    assertEquals(35, numbers.removeFront())
    assertEquals(36, numbers.removeFront())
    assertEquals(37, numbers.removeFront())
    assertEquals(38, numbers.removeFront())
    assertEquals(39, numbers.removeFront())
    assertEquals(40, numbers.removeFront())
    assertEquals(41, numbers.removeFront())
    assertEquals(0, numbers.size)
    numbers.append(42)
    numbers.append(43)
    numbers.append(44)
    numbers.append(45)
    numbers.append(46)
    numbers.append(47)
    numbers.append(48)
    numbers.append(49)
    numbers.append(50)
    numbers.append(51)
    numbers.append(52)
    numbers.append(53)
    numbers.append(54)
    numbers.append(55)
    numbers.append(56)
    numbers.append(57)
    numbers.append(58)
    numbers.append(59)
    numbers.append(60)
    numbers.append(61)
    numbers.append(62)
    numbers.append(63)
    numbers.append(64)
    numbers.append(65)
    numbers.append(66)
    numbers.append(67)
    numbers.append(68)
    numbers.append(69)
    numbers.append(70)
    numbers.append(71)
    numbers.append(72)
    numbers.append(73)
    numbers.append(74)
    numbers.append(75)
    numbers.append(76)
    numbers.append(77)
    numbers.append(78)
    numbers.append(79)
    numbers.append(80)
    numbers.append(81)
    numbers.append(82)
    numbers.append(83)
    assertEquals(42, numbers.removeFront())
    assertEquals(43, numbers.removeFront())
    assertEquals(44, numbers.removeFront())
    assertEquals(45, numbers.removeFront())
    assertEquals(46, numbers.removeFront())
    assertEquals(47, numbers.removeFront())
    assertEquals(48, numbers.removeFront())
    assertEquals(49, numbers.removeFront())
    assertEquals(50, numbers.removeFront())
    assertEquals(51, numbers.removeFront())
    assertEquals(52, numbers.removeFront())
    assertEquals(53, numbers.removeFront())
    assertEquals(54, numbers.removeFront())
    assertEquals(55, numbers.removeFront())
    assertEquals(56, numbers.removeFront())
    assertEquals(57, numbers.removeFront())
    assertEquals(58, numbers.removeFront())
    assertEquals(59, numbers.removeFront())
    assertEquals(60, numbers.removeFront())
    assertEquals(61, numbers.removeFront())
    assertEquals(62, numbers.removeFront())
    assertEquals(63, numbers.removeFront())
    assertEquals(64, numbers.removeFront())
    assertEquals(65, numbers.removeFront())
    assertEquals(66, numbers.removeFront())
    assertEquals(67, numbers.removeFront())
    assertEquals(68, numbers.removeFront())
    assertEquals(69, numbers.removeFront())
    assertEquals(70, numbers.removeFront())
    assertEquals(71, numbers.removeFront())
    assertEquals(72, numbers.removeFront())
    assertEquals(73, numbers.removeFront())
    assertEquals(74, numbers.removeFront())
    assertEquals(75, numbers.removeFront())
    assertEquals(76, numbers.removeFront())
    assertEquals(77, numbers.removeFront())
    assertEquals(78, numbers.removeFront())
    assertEquals(79, numbers.removeFront())
    assertEquals(80, numbers.removeFront())
    assertEquals(81, numbers.removeFront())
    assertEquals(82, numbers.removeFront())
    assertEquals(83, numbers.removeFront())
    assertEquals(0, numbers.size)
  }

  @Test fun `test remove front with initial capacity equal to 16`() {
    val numbers = ArrayList<Int>(16)
    assertThrows(IllegalStateException::class.java) { numbers.removeFront() }
    numbers.append(0)
    numbers.append(1)
    numbers.append(2)
    numbers.append(3)
    numbers.append(4)
    numbers.append(5)
    numbers.append(6)
    numbers.append(7)
    numbers.append(8)
    numbers.append(9)
    numbers.append(10)
    numbers.append(11)
    numbers.append(12)
    numbers.append(13)
    numbers.append(14)
    numbers.append(15)
    numbers.append(16)
    numbers.append(17)
    numbers.append(18)
    numbers.append(19)
    numbers.append(20)
    numbers.append(21)
    numbers.append(22)
    numbers.append(23)
    numbers.append(24)
    numbers.append(25)
    numbers.append(26)
    numbers.append(27)
    numbers.append(28)
    numbers.append(29)
    numbers.append(30)
    numbers.append(31)
    numbers.append(32)
    numbers.append(33)
    numbers.append(34)
    numbers.append(35)
    numbers.append(36)
    numbers.append(37)
    numbers.append(38)
    numbers.append(39)
    numbers.append(40)
    numbers.append(41)
    assertEquals(0, numbers.removeFront())
    assertEquals(1, numbers.removeFront())
    assertEquals(2, numbers.removeFront())
    assertEquals(3, numbers.removeFront())
    assertEquals(4, numbers.removeFront())
    assertEquals(5, numbers.removeFront())
    assertEquals(6, numbers.removeFront())
    assertEquals(7, numbers.removeFront())
    assertEquals(8, numbers.removeFront())
    assertEquals(9, numbers.removeFront())
    assertEquals(10, numbers.removeFront())
    assertEquals(11, numbers.removeFront())
    assertEquals(12, numbers.removeFront())
    assertEquals(13, numbers.removeFront())
    assertEquals(14, numbers.removeFront())
    assertEquals(15, numbers.removeFront())
    assertEquals(16, numbers.removeFront())
    assertEquals(17, numbers.removeFront())
    assertEquals(18, numbers.removeFront())
    assertEquals(19, numbers.removeFront())
    assertEquals(20, numbers.removeFront())
    assertEquals(21, numbers.removeFront())
    assertEquals(22, numbers.removeFront())
    assertEquals(23, numbers.removeFront())
    assertEquals(24, numbers.removeFront())
    assertEquals(25, numbers.removeFront())
    assertEquals(26, numbers.removeFront())
    assertEquals(27, numbers.removeFront())
    assertEquals(28, numbers.removeFront())
    assertEquals(29, numbers.removeFront())
    assertEquals(30, numbers.removeFront())
    assertEquals(31, numbers.removeFront())
    assertEquals(32, numbers.removeFront())
    assertEquals(33, numbers.removeFront())
    assertEquals(34, numbers.removeFront())
    assertEquals(35, numbers.removeFront())
    assertEquals(36, numbers.removeFront())
    assertEquals(37, numbers.removeFront())
    assertEquals(38, numbers.removeFront())
    assertEquals(39, numbers.removeFront())
    assertEquals(40, numbers.removeFront())
    assertEquals(41, numbers.removeFront())
    assertEquals(0, numbers.size)
    numbers.append(42)
    numbers.append(43)
    numbers.append(44)
    numbers.append(45)
    numbers.append(46)
    numbers.append(47)
    numbers.append(48)
    numbers.append(49)
    numbers.append(50)
    numbers.append(51)
    numbers.append(52)
    numbers.append(53)
    numbers.append(54)
    numbers.append(55)
    numbers.append(56)
    numbers.append(57)
    numbers.append(58)
    numbers.append(59)
    numbers.append(60)
    numbers.append(61)
    numbers.append(62)
    numbers.append(63)
    numbers.append(64)
    numbers.append(65)
    numbers.append(66)
    numbers.append(67)
    numbers.append(68)
    numbers.append(69)
    numbers.append(70)
    numbers.append(71)
    numbers.append(72)
    numbers.append(73)
    numbers.append(74)
    numbers.append(75)
    numbers.append(76)
    numbers.append(77)
    numbers.append(78)
    numbers.append(79)
    numbers.append(80)
    numbers.append(81)
    numbers.append(82)
    numbers.append(83)
    assertEquals(42, numbers.removeFront())
    assertEquals(43, numbers.removeFront())
    assertEquals(44, numbers.removeFront())
    assertEquals(45, numbers.removeFront())
    assertEquals(46, numbers.removeFront())
    assertEquals(47, numbers.removeFront())
    assertEquals(48, numbers.removeFront())
    assertEquals(49, numbers.removeFront())
    assertEquals(50, numbers.removeFront())
    assertEquals(51, numbers.removeFront())
    assertEquals(52, numbers.removeFront())
    assertEquals(53, numbers.removeFront())
    assertEquals(54, numbers.removeFront())
    assertEquals(55, numbers.removeFront())
    assertEquals(56, numbers.removeFront())
    assertEquals(57, numbers.removeFront())
    assertEquals(58, numbers.removeFront())
    assertEquals(59, numbers.removeFront())
    assertEquals(60, numbers.removeFront())
    assertEquals(61, numbers.removeFront())
    assertEquals(62, numbers.removeFront())
    assertEquals(63, numbers.removeFront())
    assertEquals(64, numbers.removeFront())
    assertEquals(65, numbers.removeFront())
    assertEquals(66, numbers.removeFront())
    assertEquals(67, numbers.removeFront())
    assertEquals(68, numbers.removeFront())
    assertEquals(69, numbers.removeFront())
    assertEquals(70, numbers.removeFront())
    assertEquals(71, numbers.removeFront())
    assertEquals(72, numbers.removeFront())
    assertEquals(73, numbers.removeFront())
    assertEquals(74, numbers.removeFront())
    assertEquals(75, numbers.removeFront())
    assertEquals(76, numbers.removeFront())
    assertEquals(77, numbers.removeFront())
    assertEquals(78, numbers.removeFront())
    assertEquals(79, numbers.removeFront())
    assertEquals(80, numbers.removeFront())
    assertEquals(81, numbers.removeFront())
    assertEquals(82, numbers.removeFront())
    assertEquals(83, numbers.removeFront())
    assertEquals(0, numbers.size)
  }

  @Test fun `test clear with default initial capacity`() {
    val numbers = ArrayList<Int>()
    numbers.clear()
    assertEquals(0, numbers.size)
    numbers.append(0)
    numbers.clear()
    assertEquals(0, numbers.size)
  }

  @Test fun `test clear with initial capacity equal to 16`() {
    val numbers = ArrayList<Int>(16)
    numbers.clear()
    assertEquals(0, numbers.size)
    numbers.append(0)
    numbers.clear()
    assertEquals(0, numbers.size)
  }

  @Test fun `test swap with default initial capacity`() {
    val numbers = ArrayList<Int>()
    numbers.append(0)
    numbers.append(1)
    numbers.append(2)
    numbers.append(3)
    numbers.swap(0, 0)
    assertEquals(0, numbers[0])
    assertEquals(1, numbers[1])
    assertEquals(2, numbers[2])
    assertEquals(3, numbers[3])
    assertEquals(4, numbers.size)
    numbers.swap(0, 1)
    assertEquals(1, numbers[0])
    assertEquals(0, numbers[1])
    assertEquals(2, numbers[2])
    assertEquals(3, numbers[3])
    assertEquals(4, numbers.size)
    numbers.swap(0, 2)
    assertEquals(2, numbers[0])
    assertEquals(0, numbers[1])
    assertEquals(1, numbers[2])
    assertEquals(3, numbers[3])
    assertEquals(4, numbers.size)
    numbers.swap(1, 2)
    assertEquals(2, numbers[0])
    assertEquals(1, numbers[1])
    assertEquals(0, numbers[2])
    assertEquals(3, numbers[3])
    assertEquals(4, numbers.size)
    numbers.swap(2, 2)
    assertEquals(2, numbers[0])
    assertEquals(1, numbers[1])
    assertEquals(0, numbers[2])
    assertEquals(3, numbers[3])
    assertEquals(4, numbers.size)
    assertThrows(IllegalArgumentException::class.java) { numbers.swap(-1, 2) }
    assertThrows(IllegalArgumentException::class.java) { numbers.swap(4, 4) }
    assertThrows(IllegalArgumentException::class.java) { numbers.swap(0, -1) }
    assertThrows(IllegalArgumentException::class.java) { numbers.swap(0, 4) }
    assertThrows(IllegalArgumentException::class.java) { numbers.swap(4, 0) }
  }

  @Test fun `test swap with initial capacity equal to 16`() {
    val numbers = ArrayList<Int>(16)
    numbers.append(0)
    numbers.append(1)
    numbers.append(2)
    numbers.append(3)
    numbers.swap(0, 0)
    assertEquals(0, numbers[0])
    assertEquals(1, numbers[1])
    assertEquals(2, numbers[2])
    assertEquals(3, numbers[3])
    assertEquals(4, numbers.size)
    numbers.swap(0, 1)
    assertEquals(1, numbers[0])
    assertEquals(0, numbers[1])
    assertEquals(2, numbers[2])
    assertEquals(3, numbers[3])
    assertEquals(4, numbers.size)
    numbers.swap(0, 2)
    assertEquals(2, numbers[0])
    assertEquals(0, numbers[1])
    assertEquals(1, numbers[2])
    assertEquals(3, numbers[3])
    assertEquals(4, numbers.size)
    numbers.swap(1, 2)
    assertEquals(2, numbers[0])
    assertEquals(1, numbers[1])
    assertEquals(0, numbers[2])
    assertEquals(3, numbers[3])
    assertEquals(4, numbers.size)
    numbers.swap(2, 2)
    assertEquals(2, numbers[0])
    assertEquals(1, numbers[1])
    assertEquals(0, numbers[2])
    assertEquals(3, numbers[3])
    assertEquals(4, numbers.size)
    assertThrows(IllegalArgumentException::class.java) { numbers.swap(-1, 2) }
    assertThrows(IllegalArgumentException::class.java) { numbers.swap(4, 4) }
    assertThrows(IllegalArgumentException::class.java) { numbers.swap(0, -1) }
    assertThrows(IllegalArgumentException::class.java) { numbers.swap(0, 4) }
    assertThrows(IllegalArgumentException::class.java) { numbers.swap(4, 0) }
  }

  @Test fun `test iterator with default initial capacity`() {
    val numbers = ArrayList<Int>()
    numbers.append(0)
    numbers.append(1)
    numbers.append(2)
    val numbersIterator = numbers.iterator()
    assertTrue(numbersIterator.hasNext())
    assertEquals(0, numbersIterator.next())
    assertTrue(numbersIterator.hasNext())
    assertEquals(1, numbersIterator.next())
    assertTrue(numbersIterator.hasNext())
    assertEquals(2, numbersIterator.next())
    assertFalse(numbersIterator.hasNext())
  }

  @Test fun `test iterator with initial capacity equal to 16`() {
    val numbers = ArrayList<Int>(16)
    numbers.append(0)
    numbers.append(1)
    numbers.append(2)
    val numbersIterator = numbers.iterator()
    assertTrue(numbersIterator.hasNext())
    assertEquals(0, numbersIterator.next())
    assertTrue(numbersIterator.hasNext())
    assertEquals(1, numbersIterator.next())
    assertTrue(numbersIterator.hasNext())
    assertEquals(2, numbersIterator.next())
    assertFalse(numbersIterator.hasNext())
  }
}
